import UIKit

// ========== 구조체와 클래스 ==========
// 구조체와 클래스는 프로그래머가 데이터를 용도에 맞게 묶어 표현하고자 할 때 유용합니다.
// 구조체와 클래스는 프로퍼티와 메서드를 사용하여 구조화된 데이터와 기능을 가질 수 있습니다.
// 하나의 새로운 사용자 정의 데이터 타입을 만들어 주는 것입니다.
// 스위프트에서는 구조체와 클래스의 모습과 문법이 거의 흡사합니다. 다만 구조체의 인스턴스는 값 타입이고,
// 클래스의 인스턴스는 참조 타입이라는 것이 이 둘을 구분하는 가장 큰 차이점입니다.
// 스위프트는 소스파일 하나에 여러 개의 구조체와 여러 개의 클래스를 정의하고 구현해도 문제가 없습니다.
// 또, 중첩 함수와 마찬가지로 구조체 안에 구조체, 클래스 안에 클래스 등과 같이 중첩 타입의 정의 및 선언이 가능합니다.

// ========== 구조체 ==========
// 구조체는 struct로 정의합니다.
/*
 [NOTE] 구조체 명명법
  구조체를 정의한다는 것은 새로운 타입을 생성해주는 것과 마찬가지이므로 기본 타입 이름(Int, String, Bool 등등)처럼
  대문자 카멜케이스를 사용하여 이름을 지어줍니다. 프로퍼티와 메서드는 소문자 카멜케이스를 사용하여 이름을 지어줍니다.
  struct 구조체 이름 {
    프로퍼티와 메서드들
  }
 */

// BasicInformation 구조체 정의
struct BasicInformation {
    var name:String
    var age:Int
}


// 구조체 인스턴스의 생성 및 초기화
// 구조체 정의를 마친 후, 인스턴스를 생성하고 초기화하고자 할 때는 기본적으로 생성되는 멤버 와이즈 이니셜라이저를 사용합니다.
// 구조체에 기본 생성된 이니셜라이저의 매개변수는 구조체의 프로퍼티 이름으로 자동 지정됩니다.
// 인스턴스가 생성되고 초기화된 후 프로퍼티 값에 접근하고 싶다면 마침표(.)를 사용하면 됩니다.
// 구조체를 상수 let으로 선언하면 인스턴스 내부의 프로퍼티 값을 변경할 수 없고, 변수 var로 선언하면
// 내부의 프로퍼티가 var로 선언된 경우에 값을 변경해줄 수 있습니다.

// BasicInformation 구조체의 인스턴스 생성 및 사용
// 프로퍼티 이름(name, age)으로 자동 생성된 이니셜라이저를 사용하여 구조체를 생성합니다.
var yagomInfo:BasicInformation = BasicInformation(name: "yagom", age: 99)
yagomInfo.age = 100     // 변경 가능!
yagomInfo.name = "Seba" // 변경 가능!

// 프로퍼티 이름(name, age)으로 자동 생성된 이니셜라이저를 사용하여 구조체를 생성합니다.
/*
let sebaInfo:BasicInformation = BasicInformation(name: "Seba", age: 99)
sebaInfo.age = 100      // 변경 불가! 오류!
sebaInfo.name = "yagom" // 변경 불가!
 */

// ========== 클래스 ==========
// 스위프트의 클래스는 부모클래스가 없더라도 상속 없이 단독으로 정의가 가능합니다.

// 클래스 정의
// 클래스를 정의할 때는 class라는 키워드를 사용합니다.
/*
 [NOTE] 클래스 명명법
  클래스를 정의한다는 것은 새로운 타입을 생성해주는 것과 마찬가지므로 기본 타입 이름(Int, String, Bool 등등)처럼
  대문자 카멜케이스를 사용하여 이름을 지어줍니다. 프로퍼티와 메서드는 소문자 카멜케이스를 사용하여 이름을 지어줍니다.
 */
/*
class 클래스 이름 {
    프로퍼티와 메서드들
}

// 클래스를 정의하는 방법은 구조체와 흡사합니다.
// 다만, 클래스는 상속받을 수 있기 때문에 상속 받을 때는 클래스 이름 뒤에 콜론(:)을 써주고 부모클래스 이름을 명시합니다.
class 클래스 이름: 부모클래스 이름 {
    프로퍼티와 메서드들
}
*/
// Person 클래스 정의
class Person {
    var height:Float = 0.0
    var weight:Float = 0.0
}

// 클래스 인스턴스의 생성과 초기화
// 클래스를 정의한 후, 인스턴스를 생성하고 초기화하고자 할 때는 기본적인 이니셜라이저를 사용합니다.
// Person 클래스에서는 프로퍼티의 기본값이 지정되어 있으므로 전달인자를 통하여 따로 초깃값을 전달해주지 않아도 됩니다.
/*
 [NOTE] 인스턴스와 객체
  흔히 다른 프로그래밍 언어에서는 클래스의 인스턴스를 객체라고 부릅니다. 물론 스위프트에서도 객체라고 부르는 것이 틀린 것은 아니지만,
  스위프트 공식 문서에서는 좀 더 한정적인 인스턴스라는 용어를 사용합니다.
  보통 객체지향 프로그래밍 패러다임을 지향하는 언어에서는 클래스의 인스턴스를 객체라고 통칭합니다.
 */

// Person 클래스의 인스턴스 생성 및 사용
var yagom2:Person = Person()
yagom2.height = 123.4
yagom2.weight = 123.4

let jenny:Person = Person()
jenny.height = 123.4
jenny.weight = 123.4

// 클래스 인스턴스의 소멸
// 클래스의 인스턴스는 참조 타입이므로 더는 참조할 필요가 없을 때 메모리에서 해제됩니다.
// 이 과정을 소멸이라고 하는데 소멸되기 직전 deinit라는 메서드가 호출됩니다.
// 클래스 내부에 deinit 메서드를 구현해주면 소멸되기 직전 deinit 메서드가 호출됩니다.
// 이렇게 호출되는 deinit 메서드는 디이니셜라이저(Deinitializer)라고 부릅니다.
// deinit 메서드는 클래스당 하나만 구현할 수 있으며, 매개변수와 반환 값을 가질 수 없습니다.
// deinit 메서드는 매개변수를 위한 소괄호도 적어주지 않습니다.

// Person 클래스의 인스턴스 생성 및 소멸
class Person2 {
    var height:Float = 0.0
    var weight:Float = 0.0
    
    deinit {
        print("person 클래스의 인스턴스가 소멸됩니다.")
    }
}

var yagom3:Person2? = Person2()
yagom3 = nil         // Person 클래스의 인스턴스가 소멸됩니다.

// 보통 deinit 메서드에는 인스턴스가 메모리에서 해제되기 직전에 처리할 코드를 넣어줍니다.
// 예를 들어 인스턴스 소멸 전에 데이터를 저장한다거나 다른 객체에 인스턴스 소멸을 알려야 할 때는
// 특히 deinit 메서드를 구현해야 합니다.

// ========== 구조체와 클래스의 차이 ==========
/*
 - 구조체와 클래스의 비슷한 점과 같은 점
   # 값을 저장하기 위해 프로퍼티를 정의할 수 있습니다.
   # 기능 실행을 위해 메서드를 정의할 수 있습니다.
   # 서브스크립트 문법을 통해 구조체 또는 클래스가 갖는 값(프로퍼티)에 접근하도록 서브스크립트를 정의할 수 있습니다.
   # 초기화될 때의 상태를 지정하기 위해 이니셜라이저를 정의할 수 있습니다.
   # 초기구현과 더불어 새로운 기능 추가를 위해 익스텐션을 통해 확장할 수 있습니다.
   # 특정 기능을 실행하기 위해 특정 프로토콜을 준수할 수 있습니다.
 
- 다른 점
   # 구조체는 상속할 수 없습니다.
   # 타입캐스팅은 클래스의 인스턴스에만 허용됩니다.
   # 디이니셜라이저는 클래스의 인스턴스에만 활용할 수 있습니다.
   # 참조 횟수 계산(Reference Counting)은 클래스의 인스턴스에만 적용됩니다.
   # 구조체 : 값 타입 / 클래스 : 참조 타입
 */

// 값 타입과 참조 타입
// 구조체는 값 타입이고 클래스는 참조 타입입니다. 값 타입과 참조 타입의 가장 큰 차이는 '무엇이 전달되느냐'입니다.
// 예를 들어 어떤 함수의 전달인자로 값 타입의 값을 넘긴다면 전달될 값이 복사되어 전달됩니다.
// 그러나 참조 타입이 전달인자로 전달될 때는 값을 복사하지 않고 참조(주소)가 전달됩니다.
// 함수의 전달인자로 넘길 때도 참조가 전달되며 다른 변수 또는 상수에 할당될 때도 마찬가지로 참조가 할당됩니다.

// 값 타입과 참조 타입의 차이
yagomInfo = BasicInformation(name:"yagom", age:99)
yagomInfo.age = 100

// yagomInfo의 값을 복사하여 할당합니다!
var friendInfo: BasicInformation = yagomInfo

print("yagom's age: \(yagomInfo.age)")      // 100
print("friend's age: \(friendInfo.age)")        // 100

friendInfo.age = 999

print("yagom's age: \(yagomInfo.age)")      // 100 - yagom의 값은 변동 없습니다.
print("friend's age: \(friendInfo.age)")    // 999 - friendInfo는 yagomInfo의 값을 복사해왔기 때문에 별개의 값을 갖습니다.

var yagom:Person = Person()
var friend:Person = yagom       // yagom의 참조를 할당합니다!

print("yagom's height: \(yagom.height)")        // 0.0
print("friend's height: \(friend.height)")      // 0.0

friend.height = 185.5
print("yagom's height: \(yagom.height)")        // 185.5 - friend는 yagom을 참조하기 때문에 값이 변동됩니다.

print("friend's height: \(friend.height)")      // 185.5 - 이를 통해 yagom이 참조하는 곳과 friend가 참조하는 곳이 같음을 알 수 있습니다.

func changeBasicInfo(_ info:BasicInformation) {
    
    var copiedInfo:BasicInformation = info
    copiedInfo.age = 1
}

func changePersonInfo(_ info:Person) {
    info.height = 155.3
}

// changeBasicInfo(_:)로 전달되는 전달인자는 값이 복사되어 전달되기 때문에
// yagomInfo의 값만 전달되는 것입니다.
changeBasicInfo(yagomInfo)
print("yagom's age: \(yagomInfo.age)")      // 100

// changePersonInfo(_:)의 전달인자로 yagom의 참조가 전달되었기 대문에
// yagom이 참조하는 값들에 변화가 생깁니다.
changePersonInfo(yagom)
print("yagom's height: \(yagom.height)")    // 155.3

// 값 타입의 데이터를 함수의 전달인자로 전달하면 메모리에 전달인자를 위한 인스턴스가 새로 생성됩니다.
// 생성된 새 인스턴스에는 전달하려는 값이 복사되어 들어갑니다. 반면, 참조 타입의 데이터는 전달인자로
// 전달할 때 기존 인스턴스의 참조를 전달하므로 새로운 인스턴스가 아닌 기존의 인스턴스 참조를 전달합니다.
// 함수의 전달인자뿐만 아니라 새로운 변수에 할당될 때 또한 마찬가지입니다.
// 클래스의 인스턴스끼리 참조가 같은지 확인할 때는 식별 연산자(Identity Operators)를 사용합니다.

// 식별 연산자의 사용
yagom = Person()
friend = yagom                          // yagom의 참조를 할당합니다.
let anotherFriend:Person = Person()     // 새로운 인스턴스를 생성합니다.

print(yagom === friend)             // true
print(yagom === anotherFriend)      // false
print(friend !== anotherFriend)     // true

// 스위프트의 기본 데이터 타입은 모두 구조체
// 스위프트 String 타입의 정의
/*
public struct String {
    /// An empty 'String'.
    public init()
}
 */
// 스위프트의 다른 기본 타입(Bool, Int, Array, Dictionary, Set 등등)도 String 타입과 마찬가지로 모두 구조체로 구현되어 있습니다.
// 이는 기본 데이터 타입은 모두 값 타입이라는 뜻입니다.전달인자를 통해 데이터를 전달하면 모두 값이 복사되어 전달될 뿐, 함수 내부에서 아무리
// 전달된 값을 변경해도 기존의 변수나 상수에는 전혀 영향을 미치지 못합니다. 이런 점을 더욱 확실히 하기 위해 스위프트의 전달인자는 모두 상수로
// 취급되어 전달되는 것일지도 모릅니다.

// ========== 구조체와 클래스 선택해서 사용하기 ==========
// 구조체와 클래스는 새로운 데이터 타입을 정의하고 기능을 추가한다는 점이 같습니다.
// 하지만 구조체 인스턴스는 항상 값 타입이고, 클래스 인스턴스는 참조 타입입니다.
// 생긴 것은 비슷하지만 용도는 다르다는 의미입니다. 프로젝트의 성격에 따라, 데이터의 활용도에 따라, 특정 타입을 구현할 때 구조체와 클래스 둘 중 하나를 선택해서 사용해야 합니다.
// 이플은 가이드 라인에서 다음 조건 중 하나 이상에 해당한다면 구조체를 사용하는 것을 권장합니다.
/*
  * 연관된 간단한 값의 집합을 캡슐화하는 것만이 목적일 때
  * 캡슐화한 값을 참조하는 것보다 복사하는 것이 합당할 때
  * 구조체에 저장된 프로퍼티가 값 타입이며 참조하는 것보다 복사하는 것이 합당할 때
  * 다른 타입으로부터 상속받거나 자신을 상속할 필요가 없을 때
 */

// 구조체로 사용하기에 가장 적합한 예로는 좌표계가 있습니다.
// x, y 좌표 등을 표현하고 싶을 때, Int 타입으로 x, y 프로퍼티를 생성할 수 있으며, 물건의 크기를 표현하고자 할 때는 부동 소수 표현인
// Double 또는 Float 타입을 사용하여 width, height, depth 등으로 묶어 표현해줄 수 있습니다.
// 이런 몇 가지 상황을 제외하면 클래스로 정의하여 사용합니다. 대다수 사용자 정의 데이터 타입은 클래스로 구현할 일이 더 많을 것입니다.
/*
 [NOTE] 똑똑한 스위프트의 복사 처리
  스위프트의 기본 데이터 타입이 모두 구조체라서 다수의 배열 또는 딕셔너리 등의 데이터를 복사하고 이용할 때
  메모리를 비효율적으로 사용한다고 오해할 수 있습니다. 그렇지만 스위프트는 꼭 필요한 경우에만 '진짜 복사'를 합니다.
  컴파일러가 판단해서 꼭 복사를 할 필요가 없을 경우, 요소를 많이 갖는 큰 배열을 함수의 전달인자로 넘겨준다고 해서
  꼭 모든 값을 메모리의 다른 공간에 복사해 넣지 않을 수도 있다는 뜻입니다.
 */
